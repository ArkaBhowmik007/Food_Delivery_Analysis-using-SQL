/*Customer & Order Insights*/

1. List the top 3 most-ordered dishes in each city.
Solution:
WITH DISH_RANK AS (
SELECT R.CITY CITY,M.DISH_NAME DISH_NAME,
        COUNT(OD.ORDER_ID) AS TIMES_ORDERED,
        RANK() OVER (PARTITION BY R.CITY ORDER BY COUNT(OD.ORDER_ID) DESC) AS RANKING
    FROM ORDER_DETAILS OD
    JOIN MENU M ON OD.MENU_ID = M.MENU_ID
    JOIN RESTAURANTS R ON M.RESTAURANT_ID = R.RESTAURANT_ID
    JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
    GROUP BY R.CITY, M.DISH_NAME
)
SELECT CITY, DISH_NAME
FROM DISH_RANK
WHERE RANKING <= 3
ORDER BY CITY, RANKING;

2. Find customers who spent more than ₹5000 in the last month.

Solution:
SELECT C.NAME AS CUSTOMER_NAME,SUM(OD.QUANTITY * M.PRICE) AS TOTAL_SPENT
FROM CUSTOMERS C
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN ORDER_DETAILS OD ON O.ORDER_ID = OD.ORDER_ID
JOIN MENU M ON OD.MENU_ID = M.MENU_ID
WHERE O.ORDER_DATE BETWEEN '2025-08-01' AND '2025-08-31'
GROUP BY C.NAME
HAVING SUM(OD.QUANTITY * M.PRICE) > 5000
ORDER BY TOTAL_SPENT DESC;

3. Identify customers who placed orders from more than 5 different restaurants.

Solution:
SELECT C.NAME AS CUSTOMER_NAME
FROM CUSTOMERS C
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.NAME
HAVING COUNT(DISTINCT O.RESTAURANT_ID) > 5
ORDER BY COUNT(DISTINCT O.RESTAURANT_ID) DESC;

4. Show repeat customers (placed more than 3 orders in the last 2 months).

Solution:
SELECT C.NAME AS CUSTOMER_NAME
FROM CUSTOMERS C
JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.ORDER_DATE BETWEEN '2025-07-01' AND '2025-08-31'
GROUP BY C.NAME
HAVING COUNT(O.ORDER_ID) > 3;

5. List customers who have never given a review.

Solution:
SELECT DISTINCT(C.NAME) CUSTOMER_NAME
FROM CUSTOMERS C
JOIN REVIEWS R
ON C.CUSTOMER_ID = R.CUSTOMER_ID
WHERE R.REVIEW_TEXT IS NULL 
OR R.REVIEW_TEXT = '';


/*Restaurant Performance*/

6. Find the restaurant with the highest number of orders in the last quarter.

Solution:
WITH MAX_ORDERS AS(
SELECT RT.NAME RESTAURANT_NAME,
COUNT(O.ORDER_ID) TOTAL_ORDERS,
RANK() OVER(ORDER BY COUNT(O.ORDER_ID) DESC)RNK
FROM RESTAURANTS RT
JOIN ORDERS O
ON RT.RESTAURANT_ID=O.RESTAURANT_ID
WHERE QUARTER(O.ORDER_DATE) = QUARTER(CURDATE() - INTERVAL 1 QUARTER)
AND YEAR(O.ORDER_DATE) = YEAR(CURDATE() - INTERVAL 1 QUARTER)
GROUP BY RT.NAME
)
SELECT RESTAURANT_NAME FROM MAX_ORDERS
WHERE RNK=1;

7. List restaurants whose average rating is below 3.5.

Solution:
SELECT RT.NAME AS RESTAURANT_NAME
FROM RESTAURANTS RT
JOIN REVIEWS R
ON RT.RESTAURANT_ID=R.RESTAURANT_ID
GROUP BY RT.NAME
HAVING AVG(R.RATING)<3.5;

8. Identify the most popular cuisine type across all cities.

Solution:
SELECT RT.CUISINE_TYPE CUISINE_TYPE
FROM RESTAURANTS RT
JOIN ORDERS O
ON RT.RESTAURANT_ID=O.RESTAURANT_ID
GROUP BY RT.CUISINE_TYPE
ORDER BY COUNT(*) DESC
LIMIT 1;

9. Calculate total revenue for each restaurant in the last month.

Solution:
SELECT RT.NAME,CONCAT('₹ ', SUM(M.PRICE * OD.QUANTITY)) AS LAST_MONTH_REVENUE
FROM RESTAURANTS RT
JOIN MENU M ON RT.RESTAURANT_ID = M.RESTAURANT_ID
JOIN ORDER_DETAILS OD ON M.MENU_ID = OD.MENU_ID
JOIN ORDERS O ON O.ORDER_ID = OD.ORDER_ID
WHERE O.ORDER_DATE BETWEEN '2025-08-01' AND '2025-08-31'
GROUP BY RT.NAME;

10. Find restaurants that have at least one dish priced above ₹1000.

Solution:
SELECT DISTINCT(RT.NAME) FROM RESTAURANTS RT
JOIN MENU M
ON RT.RESTAURANT_ID=M.RESTAURANT_ID
WHERE M.PRICE>1000

/*Delivery & Driver Efficiency*/

11. Calculate average delivery time by driver.

Solution:
SELECT D.NAME DRIVER_NAME,ROUND(AVG(O.DELIVERY_TIME_MINUTES),2) AS AVG_DELIVERY_TIME
FROM DRIVERS D
JOIN ORDERS O
ON D.DRIVER_ID=O.DRIVER_ID
GROUP BY D.NAME
ORDER BY AVG_DELIVERY_TIME;

12. Identify the fastest driver in terms of average delivery time.

Solution:
WITH AVERAGE_DELIVERY_TIME AS(
SELECT D.NAME DRIVER_NAME,ROUND(AVG(O.DELIVERY_TIME_MINUTES),2) AS AVG_DELIVERY_TIME,
RANK()OVER(ORDER BY ROUND(AVG(O.DELIVERY_TIME_MINUTES),2)) AS RNK
FROM DRIVERS D
JOIN ORDERS O
ON D.DRIVER_ID=O.DRIVER_ID
GROUP BY D.NAME
)
SELECT DRIVER_NAME FROM AVERAGE_DELIVERY_TIME
WHERE RNK=1;

13. Find the percentage of late deliveries (e.g., >40 minutes) per driver.

Solution:
SELECT D.NAME,
CONCAT(ROUND(COUNT(CASE WHEN O.DELIVERY_TIME_MINUTES>40 THEN 1 END)*100.0/COUNT(O.ORDER_ID),2),'%') AS LATE_DELIVERY_PERCENTAGE
FROM DRIVERS D
JOIN ORDERS O
ON D.DRIVER_ID=O.DRIVER_ID
GROUP BY D.NAME;

/*Menu & Order Details*/
14. List dishes that were never ordered in the last 6 months.

Solution:
SELECT DISTINCT(M.DISH_NAME)
FROM MENU M
LEFT JOIN ORDER_DETAILS OD ON M.MENU_ID = OD.MENU_ID
LEFT JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
      AND O.ORDER_DATE >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)  
WHERE O.ORDER_ID IS NULL;

15. For each restaurant, find the most profitable dish (highest total sales amount).
WITH DISHREVENUE AS (
    SELECT 
        R.RESTAURANT_ID,
        R.NAME AS RESTAURANT_NAME,
        M.MENU_ID,
        M.DISH_NAME,
        SUM(OD.QUANTITY * M.PRICE) AS TOTAL_SALES
    FROM MENU M
    JOIN RESTAURANTS R ON M.RESTAURANT_ID = R.RESTAURANT_ID
    JOIN ORDER_DETAILS OD ON M.MENU_ID = OD.MENU_ID
    JOIN ORDERS O ON OD.ORDER_ID = O.ORDER_ID
    GROUP BY R.RESTAURANT_ID, R.NAME, M.MENU_ID, M.DISH_NAME
),
RANKEDDISHES AS (
    SELECT *,
           RANK() OVER (PARTITION BY RESTAURANT_ID ORDER BY TOTAL_SALES DESC) AS RANKING
    FROM DISHREVENUE
)
SELECT RESTAURANT_NAME,DISH_NAME,
CONCAT('₹ ', TOTAL_SALES) AS TOTAL_SALES
FROM RANKEDDISHES
WHERE RANKING = 1
ORDER BY RESTAURANT_NAME;